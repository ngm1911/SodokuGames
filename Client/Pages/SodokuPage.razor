@using BlazorSodokuApp.Client.RefitApi
@inject IJSRuntime JSRuntime
@inherits OwningComponentBase
@inject ISodokuApi ISodokuApi
@using DevExtreme.AspNet.Data

<h3>Sodoku</h3>

<div class="sudoku-container">
    <table class="sudoku-board">
        @for (int i = 0; i < 9; i++)
        {
            <tr>
                @for (int j = 0; j < 9; j++)
                {
                    var row = i;
                    var col = j;
                    <td>
                        <input type="text" @oninput="(e => UpdateCell(row, col, e.Value.ToString()))" 
                               value="@(game.Board[row, col] == 0 ? string.Empty : game.Board[row, col])"
                               class="sudoku-cell @(game.BoardInit[row, col] != 0 ? "filled" : "")"
                               maxlength="1" />
                    </td>
                }
            </tr>
        }
    </table>
    <div class="controls">
        <button @onclick="GenerateNewGame">New game</button>
        <button @onclick="CheckIsValid">Check</button>
        <button @onclick="SolveSudokuGame">Solve</button>
    </div>
</div>

<h3>History</h3>

<div id="dataGrid"></div>

<script>
    //Init grid
    $(function () { 
        $("#dataGrid").dxDataGrid({
                dataSource: []
            });
    });

    // Update data source
    window.updateDataGrid = function (data) {
        if ($("#dataGrid").dxDataGrid('instance')) {
            $("#dataGrid").dxDataGrid('instance').option('dataSource', data);
        } else {
            $("#dataGrid").dxDataGrid({
                dataSource: data,
                columns: [
                    { dataField: "Id", caption: "ID" },
                    { dataField: "Board", caption: "Board" },
                    { dataField: "CreatedAt", caption: "Created At", dataType: "date" }
                ],
                allowColumnResizing: true,
                allowColumnReordering: true
            });
        }
    };
</script>